---
title: "Getting started with R and Python"
date: 2025-09-22
author: "Franco Catuogno"
format: html
embed-resources: true
---

## Getting started

### Name concepts of a programming language

> Write answer here 

### Check operator precedence

 - Calculate `2 + 6 * 5 ^ 2`
 
```{r}
2 + 6 * 5 ^ 2
```


 - Which operator has the higher priority?

::: unilur-solution
Exponentiation

::: 

 - Change the order of execution giving priority to `+`


```{r}
(2 + 6) * 5 ^ 2
```
```{r}
(result <- 2 + 5)
```
 
```{r}

```
 
 
```{python}
(b := (a := 1) + 2)
```

### How to exchange two variables?

There are three ways (in Python) to exchange the values of the names!

```{python}
a = 5
b = 10
```

```{python}
#option1
c = a
a = b
b = c
print(a)

#option2
b, a = a, b
print(a,b)

#option3

b = b + a
a = b - a
b = b - a
print(b)
print(a)

```

### What is the output of the following code?

```{python}
x = 7
1 < x < 10 < x + 3 <= 13
```

Explain in your words!

::: unilur-solution
Python parses four expressions, 1 < x and x < 10 and 10 < x + 3 and x + 3 <= 13 [ ] True or [ ] False 
:::
In addition, the reson why the output is false is because of the third expression " 10 < x + 3 ", even if the other three our true. 

### Missing values

A group of people in the street were asked about their age and answered `18, 20, 34, 53, 12, NA, NA, 72, 75, 13`.


::: {.callout-tip}
### Tip
You can use the function `replace()` to substitute `NA` with `0`.

Consider `is.na()` to identify indeces of missing positions.
:::

 * Compute the average age. 
 
 * Replace NAs with 0. 
 
 * How large is error that you make when ignore missing values?

```{r}
ages <- c(18,20,34,53,12,NA,NA,72,75,13)

mean(ages, na.rm = TRUE)


ages0 <- replace(ages,is.na(ages),0)

mean(ages0, na.rm = TRUE)


```
When replacing NA with "0" the average value is 3/4 of the average when ignoring NAs

### Create a data frame

Create a data frame containing the following information:
  name |age |weight |  eye| group
Paul  | 16  | 57.0 |green  |   1
 Mary  |16   |50.0  |blue   |  1
 Sara  |16   |52.6 |black   |  2
 John  |17   |65.3 | blue    | 2

```{r}

data.frame(
  name = c("Paul", "Mary", "Sara", "John"),
  age = c(16, 16, 16, 17),
  weight = c(57.0, 50.0, 52.6, 65.3),
  eye = c("green", "blue", "black", "blue"),
  group = c(1, 1, 2, 2)
)

```

Assign the data frame to a variable named `classroom`.

```{r}
classroom <- data.frame(
  name = c("Paul", "Mary", "Sara", "John"),
  age = c(16, 16, 16, 17),
  weight = c(57.0, 50.0, 52.6, 65.3),
  eye = c("green", "blue", "black", "blue"),
  group = c(1, 1, 2, 2)
)
```

Describe the type of variables in `classroom`.

```{r}
str(classroom)
```


Which data structure would you use in base Python?

```{python}
classroom = {
    'name': ['Paul', 'Mary', 'Sara', 'John'],
    'age': [16, 16, 16, 17],
    'weight': [57.0, 50.0, 52.6, 65.3],
    'eye': ['green', 'blue', 'black', 'blue'],
    'group': [1, 1, 2, 2]
}

```



## `mtcars`

You will work with the built-in `mtcars` dataset (R) and a Python equivalent derived from it. The goal is to compare the capabilities of R and Python, highlighting their strengths and differences in data processing.


### Setup

- For R, use the `mtcars` dataset (built-in).
- For Python, use a dictionary-based equivalent of `mtcars`.
- Only use **base R** and **base Python**.

### Notes

- Focus on **readability** and **reproducibility** in your code.
- Provide brief comments explaining your code and comparisons between R and Python.
- Use `#` for comments in both languages to explain your reasoning.
- Highlight differences in syntax, ease of use, and language strengths in your comparisons.

## Python `mtcars` equivalent

Run this R code to represent `mtcars` data frame:
```{r}
head(mtcars, 10)
```

Run this Python code to create a dictionary mimicking `mtcars`:

```{python}
mtcars = {
    'mpg':  [21.0, 21.0, 22.8, 21.4, 18.7, 18.1, 14.3, 24.4, 22.8, 19.2, 17.8,
             16.4, 17.3, 15.2, 10.4, 10.4, 14.7, 32.4, 30.4, 33.9, 21.5, 15.5,
             15.2, 13.3, 19.2, 27.3, 26.0, 30.4, 15.8, 19.7, 15.0, 21.4],
    'cyl':  [6, 6, 4, 6, 8, 6, 8, 4, 4, 6, 6,
             8, 8, 8, 8, 8, 8, 4, 4, 4, 4, 8,
             8, 8, 8, 4, 4, 4, 8, 6, 8, 4],
    'disp': [160.0, 160.0, 108.0, 258.0, 360.0, 225.0, 360.0, 146.7, 140.8, 167.6, 167.6,
             275.8, 275.8, 275.8, 472.0, 460.0, 440.0, 78.7, 75.7, 71.1, 120.1, 318.0,
             304.0, 350.0, 400.0, 79.0, 120.3, 95.1, 351.0, 145.0, 301.0, 121.0],
    'hp':   [110, 110, 93, 110, 175, 105, 245, 62, 95, 123, 123,
             180, 180, 180, 205, 215, 230, 66, 52, 65, 97, 150,
             150, 245, 175, 66, 91, 113, 264, 175, 335, 109],
    'drat': [3.90, 3.90, 3.85, 3.08, 3.15, 2.76, 3.21, 3.69, 3.92, 3.92, 3.92,
             3.07, 3.07, 3.07, 2.93, 3.00, 3.23, 4.08, 4.93, 4.22, 3.70, 2.76,
             3.15, 3.73, 3.08, 4.08, 4.43, 3.77, 4.22, 3.62, 3.54, 4.11],
    'wt':   [2.620, 2.875, 2.320, 3.215, 3.440, 3.460, 3.570, 3.190, 3.150, 3.440, 3.440,
             4.070, 3.730, 3.780, 5.250, 5.424, 5.345, 2.200, 1.615, 1.835, 2.465, 3.520,
             3.435, 3.840, 3.845, 1.935, 2.140, 1.513, 3.170, 2.770, 3.570, 2.780],
    'qsec': [16.46, 17.02, 18.61, 19.44, 17.02, 20.22, 15.84, 20.00, 22.90, 18.30, 18.90,
             17.40, 17.60, 18.00, 17.98, 17.82, 17.42, 19.47, 18.52, 19.90, 20.01, 16.87,
             17.30, 15.41, 17.05, 18.90, 16.70, 16.90, 14.50, 15.50, 14.60, 18.60],
    'vs':   [0, 0, 1, 1, 0, 1, 0, 1, 1, 1, 1,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0,
             0, 0, 0, 1, 0, 1, 0, 0, 0, 1],
    'am':   [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,
             0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0,
             0, 0, 0, 1, 1, 1, 1, 1, 1, 1],
    'gear': [4, 4, 4, 3, 3, 3, 3, 4, 4, 4, 4,
             3, 3, 3, 3, 3, 3, 4, 4, 4, 3, 3,
             3, 3, 3, 4, 5, 5, 5, 5, 5, 4],
    'carb': [4, 4, 1, 1, 2, 1, 4, 2, 2, 4, 4,
             3, 3, 3, 4, 4, 4, 1, 2, 1, 1, 2,
             2, 4, 2, 1, 2, 2, 4, 6, 8, 2],
    'name': ['Mazda RX4', 'Mazda RX4 Wag', 'Datsun 710', 'Hornet 4 Drive', 'Hornet Sportabout',
             'Valiant', 'Duster 360', 'Merc 240D', 'Merc 230', 'Merc 280', 'Merc 280C',
             'Merc 450SE', 'Merc 450SL', 'Merc 450SLC', 'Cadillac Fleetwood', 'Lincoln Continental',
             'Chrysler Imperial', 'Fiat 128', 'Honda Civic', 'Toyota Corolla', 'Toyota Corona',
             'Dodge Challenger', 'AMC Javelin', 'Camaro Z28', 'Pontiac Firebird', 'Fiat X1-9',
             'Porsche 914-2', 'Lotus Europa', 'Ford Pantera L', 'Ferrari Dino', 'Maserati Bora',
             'Volvo 142E']
}
```


## Tasks

### Task 1: Basic operations

Using `mtcars` (R) and the provided dictionary (Python):

#### **Arithmetic operations**:

- In R, calculate the average `mpg` for cars with `cyl == 6` using **vectorized** operations.
   
```{r}

mean_mpg_cyl6 <- mean(mtcars$mpg[mtcars$cyl == 6])

# mtcars$cyl == 6 shows a logical vector with "TRUE" for those observations with cyl = 6
# mpg[mtcars$cyl == 6] gives the values of mpg that belongs to the observations with cyl = 6
# mean(mtcars$mpg[mtcars$cyl == 6] calculates the mean of the previous one

```

- In base Python, calculate the same quantity.

```{python}

mpg_cyl6 = [mpg for mpg, cyl in zip(mtcars["mpg"], mtcars["cyl"]) if cyl == 6]

#  Everything written between the square brackets is equivalent to "mtcars$mpg[mtcars$cyl == 6]" in base R.

mean_mpg_cyl6 = sum(mpg_cyl6) / len(mpg_cyl6) if mpg_cyl6 else None

# computing the mean seems to require writing the equation instead of applying a single funciton

print(mean_mpg_cyl6)

# unlike base R, language in python is more intuitive as functions follow a similar logic to to grammar in English, but code in R is shorter
```



#### **Comparison and logical operations**:
- In R, count the number of cars where `mpg > 20` and `hp <= 100` using vectorized logical operations.

```{r}
sum(mtcars$mpg > 20 & mtcars$hp <= 100)

# Te expressions mtcars$mpg > 20 and mtcars$hp <= 100 indicate the conditions and & is for the taking into account both conditions at the same time
# sum is the function for counting all the observations that satisfy the conditions mentioned

```

- In Python, perform the same operation.

```{python}

count = sum(1 for m, h in zip(mtcars['mpg'], mtcars['hp']) if m > 20 and h <= 100)

# zip(mpg, hp) is for pairing corresponding mpg and hp values.
# sum(1 for ... if ...) counts how many pairs satisfy the condition.

print(count)

```



### Task 2: Data types and structures

#### **Type checking and coercion**:
- In R, check the type of `mtcars$mpg` and coerce it to integer.

```{r}
# Checking the type
class(mtcars$mpg)
typeof(mtcars$mpg)

# Coercing to integer
mtcars$mpg <- as.integer(mtcars$mpg)

# Check again
class(mtcars$mpg)
typeof(mtcars$mpg)

```

- In Python, check the type of `mtcars['mpg']` and coerce it to a list of integers.

 
```{python}
# Checking type of the first element (assuming all are same type)
print(type(mtcars['mpg'][0]))

# Coercing all mpg values to int (truncating decimals)
mtcars['mpg'] = [int(m) for m in mtcars['mpg']]

# Check type again
print(type(mtcars['mpg'][0]))

```


#### **Subsetting/slicing**:
- In R, subset `mtcars` to select rows where `gear == 4` and columns `mpg`, and `hp`.

```{r}
subset_mtcars <- mtcars[mtcars$gear == 4, c("mpg", "hp")]

# mtcars$gear == 4 creates a logical vector for filtering rows with gear = 4.
# hp and mpg columns are selected by c("mpg", "hp") 

print(subset_mtcars)

```

- In Python, perform the same operation using explicit iteration.

```{python}

# Prepare lists to hold subsetted values
subset_mpg = []
subset_hp = []

# Iterate over indices and select rows where gear == 4
for i in range(len(mtcars['gear'])):
    if mtcars['gear'][i] == 4:
        subset_mpg.append(mtcars['mpg'][i])
        subset_hp.append(mtcars['hp'][i])

# To show the result as list of dicts (rows):
subset_rows = [{'mpg': m, 'hp': h} for m, h in zip(subset_mpg, subset_hp)]
print(subset_rows)

# Again R version of the code is much shorter

```



### Task 3: Packages and libraries

#### **Loading packages/libraries**:
- In R, load the `tidyverse` package and use `dplyr::filter()` to select cars with `am == 1` (manual transmission).

```{r}
library(tidyverse)

mtcars |> 
  dplyr::filter(am == 1)
```

- In Python, import the `statistics` module and calculate the mean `mpg` for cars with `am == 1`.
```{python}
import statistics

# Extract mpg values where am == 1
mpg_manual = [mpg for mpg, am in zip(mtcars['mpg'], mtcars['am']) if am == 1]

# Calculate mean mpg for manual transmission cars
mean_mpg_manual = statistics.mean(mpg_manual)

print(mean_mpg_manual)

# the use of the package statistics offers a function for calculating the mean which wasn't available on base Python, unlike base R
```



